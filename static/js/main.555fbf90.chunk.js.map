{"version":3,"sources":["flux/actions/types.js","flux/reducers/BoardReducer.js","flux/reducers/index.js","flux/store.js","components/Task.js","flux/actions/BoardActions.js","components/AddTask.js","components/Board.js","components/AddBoard.js","components/Kanban.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CREATE_BOARD","RENAME_BOARD","DELETE_BOARD","CLEAR_BOARD","CREATE_TASK","EDIT_TASK","DELETE_TASK","TRANSFER_TASK","initialState","boards","id","uuidv4","name","tasks","title","combineReducers","board","state","action","type","payload","map","boardId","Object","assign","newName","filter","task","newTitle","transTask","prevBoardId","newBoardId","newBoards","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Task","handleDelete","props","deleteTask","boardid","handleEdit","oldTitle","a","Swal","fire","input","inputLabel","inputPlaceholder","showCancelButton","inputValidator","value","editTask","this","connectDragSource","style","styles","TaskStyle","Card","Body","ButtonGroup","float","size","Button","variant","onClick","bind","data-bs-toggle","data-bs-placement","Component","marginTop","marginBottom","DragSource","beginDrag","monitor","prevBoard","connect","dragSource","isDragging","dispatch","AddTask","isCreateTask","newTaskName","boardID","handleClick","setState","handleSubmit","e","preventDefault","createTask","handleChange","target","handleCancel","onSubmit","className","placeholder","onChange","required","block","Board","handleChangeName","oldName","renameBoard","handleClear","clearBoard","deleteBoard","column","connectDropTarget","Header","Footer","DropTarget","drop","component","item","getItem","transferTask","dropTarget","oldTask","AddBoard","isCreateBoard","newBoardName","createBoard","Kanban","DndProvider","backend","HTML5Backend","Row","Col","md","ColumnStyle","length","Alert","App","mainContentStyle","Container","fluid","paddingLeft","paddingRight","minHeight","background","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.555fbf90.chunk.js","sourcesContent":["//BOARD ACTIONS\nexport const CREATE_BOARD = 'CREATE_BOARD';\nexport const RENAME_BOARD = 'RENAME_BOARD';\nexport const DELETE_BOARD = 'DELETE_BOARD';\nexport const CLEAR_BOARD = 'CLEAR_BOARD';\n\n//TASK ACTIONS\nexport const CREATE_TASK = 'CREATE_TASK';\nexport const EDIT_TASK = 'EDIT_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const TRANSFER_TASK = 'TRANSFER_TASK ';","import { CREATE_BOARD, RENAME_BOARD, DELETE_BOARD , CLEAR_BOARD, CREATE_TASK, EDIT_TASK, DELETE_TASK, TRANSFER_TASK} from '../actions/types';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Board Schema {id: uuidv4(), name: 'TO DO', tasks: []}\n// Task Schema {id: uuidv4(), title: 'Add Button'}\n\nconst initialState = {\n    boards: [\n        {id: uuidv4(), name: 'TO DO', tasks: [{id: uuidv4(), title: 'Add Button'}, {id: uuidv4(), title: 'Add ToolTip'}]},\n        {id: uuidv4(), name: 'IN PROGRESS', tasks: [{id: uuidv4(), title: 'Add Header'}, {id: uuidv4(), title: 'Add Footer'}]}],\n}\n\nexport default function Reducer( state=initialState, action ) {\n    switch (action.type) {\n        case CREATE_BOARD:\n            return {\n                ...state,\n                boards: [...state.boards, action.payload]\n            };\n\n        case RENAME_BOARD:\n            return {\n                ...state,\n                // Looks for specific board before renaming it\n                boards: state.boards.map(board => board.id === action.payload.boardId\n                    ? Object.assign(board, {name: action.payload.newName})\n                    : board )\n            };\n\n        case DELETE_BOARD:\n            return {\n                ...state,\n                boards: [...state.boards.filter(board => board.id !== action.payload)]\n            };\n\n        case CLEAR_BOARD:\n            return {\n                ...state,\n                //Clears the board's tasks array\n                boards: state.boards.map(board => board.id === action.payload\n                    ? Object.assign(board, {tasks: []})\n                    : board )\n            };\n\n        case CREATE_TASK:\n            return {\n                ...state,\n                boards: state.boards.map(board => board.id === action.payload.boardId\n                    ? Object.assign(board, {tasks: [...board.tasks, {id: action.payload.id, title: action.payload.title} ]})\n                    : board )\n            };\n\n        case EDIT_TASK:\n            return {\n                ...state,\n                // Looks for specific task in specific board the updates its title\n                boards: state.boards.map(board => board.id === action.payload.boardId\n                    ? Object.assign(board, {tasks: [...board.tasks.filter(task => task.id === action.payload.id ?\n                        Object.assign(task, {title: action.payload.newTitle})\n                        : task ) ]})\n                    : board ),\n            };\n\n\n        case DELETE_TASK:\n            return {\n                ...state,\n                boards: state.boards.map(board => board.id === action.payload.boardId\n                    ? Object.assign(board, {tasks: [...board.tasks.filter(task => task.id !== action.payload.id) ]})\n                    : board )\n            };\n\n        case TRANSFER_TASK:\n            const {transTask, prevBoardId, newBoardId} = action.payload\n            if (prevBoardId === newBoardId){\n                // Does nothing if the source and destination are the same\n                return state;\n            }\n\n            return{\n                ...state,\n                // Delete from previos board\n                boards: state.boards.map(board => board.id === prevBoardId\n                    ? Object.assign(board, {tasks: [...board.tasks.filter(task => task.id !== transTask.id) ]})\n                    : board ),\n                // Adds to new board\n                newBoards: state.boards.map(board => board.id === newBoardId\n                    ? Object.assign(board, {tasks: [...board.tasks, {id: transTask.id, title: transTask.title} ]})\n                    : board )\n                }\n            \n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport BoardReducer from './BoardReducer'\n\nexport default combineReducers({\n    board: BoardReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware)\n));\n\nexport default store;","import React, { Component } from 'react';\nimport {Card, Button, ButtonGroup} from 'react-bootstrap';\nimport {Trash, Eraser} from 'react-bootstrap-icons';\nimport {connect} from 'react-redux';\nimport{ deleteTask, editTask } from '../flux/actions/BoardActions';\nimport Swal from 'sweetalert2';\nimport { DragSource } from 'react-dnd';\n\n//This is used to identify a matching droppable/draggable class\nconst Types = {\n    ITEM: 'task'\n}\n\n//This represents the Draggable task as a simple object\nconst itemSource = {\n    beginDrag(props, monitor) {\n        const droppedTask = {task: props.task, prevBoard: props.boardid}\n        return droppedTask \n    }\n}\n\n// This makes the component draggable\nfunction collect(connect, monitor) {\n    return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n    }\n}\n\nclass Task extends Component {\n    handleDelete = (id) => {\n        this.props.deleteTask(id, this.props.boardid)\n    }\n\n    handleEdit = async(id, oldTitle) => {\n        // This calls an alert to get user input\n        const { value: title } = await Swal.fire({\n            title: 'Input new title',\n            input: 'text',\n            inputLabel: `New title for task: ${oldTitle}`,\n            inputPlaceholder: 'Task Title',\n            showCancelButton: true,\n            inputValidator: (value) => {\n                return !value && 'You need to write something!'\n            }\n        })\n        //Checks if empty\n        if(title){\n            this.props.editTask(id, this.props.boardid, title)\n        }\n    }\n\n    render() {\n        const {id, title} =this.props.task\n\n        const {connectDragSource} = this.props\n\n        return connectDragSource(\n            <div style={styles.TaskStyle}>\n                <Card>\n                    <Card.Body>\n                        {title}\n                        <ButtonGroup style={{float: 'right'}} size=\"sm\">\n                            {/* Added tooltips for user friendliness */}\n                            <Button variant=\"success\" onClick={this.handleEdit.bind(this, id, title)} data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Rename Task\"><Eraser/></Button>\n                            <Button variant=\"danger\" onClick={this.handleDelete.bind(this, id)} data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Delete Task\"><Trash/></Button>\n                        </ButtonGroup>\n                    </Card.Body>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    TaskStyle: {\n        marginTop: '1vh',\n        marginBottom: '1vh',\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.board\n})\n\n//This uses the DragSource super component to make it draggable \nTask = DragSource(Types.ITEM, itemSource, collect)(Task)\nexport default connect(mapStateToProps, {deleteTask, editTask})(Task)","import { CREATE_BOARD, RENAME_BOARD, DELETE_BOARD, CLEAR_BOARD, CREATE_TASK, EDIT_TASK, DELETE_TASK, TRANSFER_TASK} from './types';\n// uuid is used to generate uniques Ids for tasks and boards\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const createBoard = (name) => dispatch => {\n    const board = {\n        id: uuidv4(),\n        name,\n        tasks: []\n    }\n    dispatch({type: CREATE_BOARD, payload: board})\n}\n\nexport const renameBoard = (boardId ,newName) => dispatch => {\n    const board = {\n        boardId,\n        newName,\n    }\n    dispatch({type: RENAME_BOARD, payload: board})\n}\n\nexport const clearBoard = (boardId) => dispatch => {\n    dispatch({type: CLEAR_BOARD, payload: boardId})\n}\n\nexport const deleteBoard = (boardId) => dispatch => {\n    dispatch({type: DELETE_BOARD, payload: boardId})\n}\n\nexport const createTask = (boardId, title) => dispatch => {\n    const task = {\n        id: uuidv4(),\n        title,\n        boardId\n    }\n    dispatch({type: CREATE_TASK, payload: task})\n}\n\nexport const editTask = (id, boardId, newTitle) => dispatch => {\n    const task = {\n        id,\n        boardId,\n        newTitle\n    }\n    dispatch({type: EDIT_TASK, payload: task})\n}\n\nexport const deleteTask = (id, boardId) => dispatch => {\n    const task = {\n        id,\n        boardId\n    }\n    dispatch({type: DELETE_TASK, payload: task})\n}\n\nexport const transferTask = (oldTask, newBoardId) => dispatch => {\n    const transferTask = {\n        transTask: oldTask.task,\n        prevBoardId: oldTask.prevBoard,\n        newBoardId\n    }\n    dispatch({type: TRANSFER_TASK, payload: transferTask})\n}","import React, { Component } from 'react';\nimport { Button} from 'react-bootstrap';\nimport {createTask} from '../flux/actions/BoardActions';\nimport {connect} from 'react-redux'\n\nclass AddTask extends Component {\n    state = {\n        // This boolean controls the visibility of the component\n        isCreateTask: false,\n        newTaskName: \"\",\n        // This variable keeps track of the parent board\n        boardID: this.props.boardid\n    }\n\n    handleClick = () => {\n        // This makes the form visible\n        this.setState({isCreateTask: true})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.createTask(this.state.boardID, this.state.newTaskName);\n        //This closes the form and resets the newTaskName state variable\n        this.setState({newTaskName: \"\"})\n        this.setState({isCreateTask: false})\n    }\n\n    handleChange = (e) => {\n        //This updates the newTaskName state variable whenever there is an edit in the input field\n        this.setState({ [e.target.name] : e.target.value })\n    }\n\n    handleCancel = () => {\n        //This closes the form and resets the newTaskName state variable\n        this.setState({newTaskName: \"\"})\n        this.setState({isCreateTask: false})\n    }\n\n    render() {\n        return (\n            <div>\n                {/* The Ternary Operator handles the form visibility */}\n                {!this.state.isCreateTask? \n                <div><Button onClick={this.handleClick} block>Add Task</Button></div>:\n                    <form  onSubmit={this.handleSubmit} >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\" >Title:</label>\n                            <input \n                                    type = \"text\"\n                                    name = \"newTaskName\"\n                                    className=\"form-control\"\n                                    placeholder = \"Add the Title ...\"\n                                    value = {this.state.newTaskName}\n                                    onChange = { this.handleChange }\n                                    required\n                                />\n                        </div>\n                        <Button variant=\"outline-danger\" onClick={this.handleCancel} style={{float: 'left'}}>Cancel</Button>\n                        <Button variant=\"outline-primary\" type=\"submit\" style={{float: 'right'}}>Add</Button>\n\n                    </form>\n\n            }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.board\n})\n\nexport default connect(mapStateToProps, {createTask})(AddTask)","import React, { Component } from 'react';\nimport { Card, Button, ButtonGroup} from 'react-bootstrap';\nimport Task from './Task';\nimport {connect} from 'react-redux';\nimport{ renameBoard, deleteBoard, clearBoard, transferTask } from '../flux/actions/BoardActions'\nimport {Trash, Eraser, FileEarmarkMinus} from 'react-bootstrap-icons';\nimport Swal from 'sweetalert2'\nimport AddTask from './AddTask'\nimport { DropTarget } from 'react-dnd'\n\n//This is used to identify a matching droppable/draggable class\nconst Types = {\n    ITEM: 'task'\n}\n\n// This makes the component droppable\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget()\n    }\n}   \n\n\nclass Board extends Component {\n    handleChangeName = async(id,oldName) => {\n        // This calls an alert to get user input\n        const { value: name } = await Swal.fire({\n            title: 'Input new name',\n            input: 'text',\n            inputLabel: `New name for board: ${oldName}`,\n            inputPlaceholder: 'Board Name',\n            showCancelButton: true,\n            inputValidator: (value) => {\n                return !value && 'You need to write something!'\n            }\n        })\n        //Checks if empty\n        if (name) {\n            this.props.renameBoard(id, name)\n        }\n    }\n\n    handleClear = (id) => {\n        this.props.clearBoard(id)\n    }\n\n    handleDelete = (id) => {\n        this.props.deleteBoard(id)\n    }\n\n    render() {\n        const {id, name, tasks} =this.props.column\n        const { connectDropTarget } = this.props\n\n        return connectDropTarget(\n            <div style={this.props.style}>\n                <Card>\n                    <Card.Header>\n                        <strong>{name}</strong>\n                        <ButtonGroup style={{float: 'right'}}>\n                            {/* Added tooltips for user friendliness */}\n                            <Button variant=\"success\" onClick={this.handleChangeName.bind(this, id, name)} data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Rename Board\"><Eraser/></Button>\n                            <Button variant=\"primary\" onClick={this.handleClear.bind(this, id)} data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Clear Board\"><FileEarmarkMinus/></Button>\n                            <Button variant=\"danger\" onClick={this.handleDelete.bind(this, id)} data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Delete Board\"><Trash/></Button>\n                        </ButtonGroup>\n                        \n                    </Card.Header>\n                    <Card.Body>\n                    {tasks.map( task => (<Task key={task.id} task={task}  boardid={id}/>))}\n                    </Card.Body>\n                    <Card.Footer>\n                        <AddTask boardid={id}/>\n                    </Card.Footer>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.board\n})\n\n//This handles the draggable item once its dropped\nconst spec = {\n    drop(props, monitor, component){\n        const item = monitor.getItem()\n        props.transferTask(item, props.column.id)\n        return item;\n        \n    }\n}\n\n//This uses the DropTraget super component to make it droppable \nBoard = DropTarget(Types.ITEM, spec, collect)(Board)\nexport default connect(mapStateToProps, {renameBoard, clearBoard, deleteBoard, transferTask})(Board)","import React, { Component } from 'react';\nimport { Button, Card} from 'react-bootstrap';\nimport {createBoard} from '../flux/actions/BoardActions';\nimport {connect} from 'react-redux'\n\nclass AddBoard extends Component {\n    state = {\n        // This boolean controls the visibility of the component\n        isCreateBoard: false,\n        newBoardName: \"\"\n    }\n\n    handleClick = () => {\n        // This makes the form visible\n        this.setState({isCreateBoard: true})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //This calls the CreateBoard Redux Action\n        this.props.createBoard(this.state.newBoardName);\n        //This closes the form and resets the newBoardName state variable\n        this.setState({newBoardName: \"\"})\n        this.setState({isCreateBoard: false})\n    }\n\n    handleChange = (e) => {\n        //This updates the newBoardName state variable whenever there is an edit in the input field\n        this.setState({ [e.target.name] : e.target.value })\n    }\n\n    handleCancel = () => {\n        //This closes the form and resets the newBoardName state variable\n        this.setState({newBoardName: \"\"})\n        this.setState({isCreateBoard: false})\n    }\n\n    render() {\n        return (\n            <div style={this.props.style}>\n            {/* The Ternary Operator handles the form visibility */}\n            {!this.state.isCreateBoard? \n                <div><Button onClick={this.handleClick} size=\"lg\" block>Add Board</Button></div>:\n                <Card><Card.Body>\n                    <form  onSubmit={this.handleSubmit} >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\" >Name:</label>\n                            <input \n                                    type = \"text\"\n                                    name = \"newBoardName\"\n                                    className=\"form-control\"\n                                    placeholder = \"Add the name ...\"\n                                    value = {this.state.newBoardName}\n                                    onChange = { this.handleChange }\n                                    required\n                                />\n                        </div>\n                        <Button variant=\"outline-danger\" onClick={this.handleCancel} style={{float: 'left'}}>Cancel</Button>\n                        <Button variant=\"outline-primary\" type=\"submit\" style={{float: 'right'}}>Add</Button>\n\n                    </form>\n                    </Card.Body></Card>\n            }\n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.board\n})\n\nexport default connect(mapStateToProps, {createBoard})(AddBoard)","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Board from './Board';\nimport AddBoard from './AddBoard';\nimport {Row, Col, Alert} from 'react-bootstrap';\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nclass Kanban extends Component {\n    render() {\n        const {boards} = this.props.board\n        return (\n            //Acts as a sandbox for dragging and dropping\n            <DndProvider backend={HTML5Backend}>\n                <Row>\n                    {/* Board and AddBoard are wrapped in <Col> for consistent styling across different rows*/}\n                    {boards.map( board => (<Col key={board.id} md={3}><Board column={board} style={styles.ColumnStyle}/></Col>))}\n                    {/* This makes sure a user can't add more than 5 boards */}\n                    {boards.length < 5? <Col md={3}><AddBoard style={styles.ColumnStyle}/></Col>:\n                    <Col md={3}><Alert variant=\"info\" style={styles.ColumnStyle}>Amount of boards exhausted. You can only create 5 boards</Alert></Col>\n                    }\n                </Row>\n            </DndProvider>\n        )\n    }\n}\n\nconst styles = {\n    ColumnStyle: {\n        marginTop: '2vh',\n        marginBottom: '2vh',\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.board\n})\n\nexport default connect(mapStateToProps, {})(Kanban)","import React, {Component} from 'react';\nimport { Provider } from 'react-redux';\nimport store from './flux/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Kanban from './components/Kanban';\n\nimport {Container} from 'react-bootstrap'\n\nclass App extends Component {\n  render(){\n    return(\n      // Adds the redux store across all encapsulated components\n      <Provider store={store}>\n        <div style={styles.mainContentStyle}>\n          <Container fluid>\n            <h3><strong>Kanban Clone</strong></h3>\n            <Kanban />\n          </Container>\n        </div>\n      </Provider>\n    )\n  }\n}\n\n\nconst styles = {\n  mainContentStyle: {\n    paddingLeft: 0,\n    paddingRight: 0,\n    minHeight: '100vh',\n    background: '#ECECEC'\n  },\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}